---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Yanzhuolin.
--- DateTime: 2020/2/27 15:06
---

local RecordListCache = {}
local callbackList = {}
local requestId = 0

MaxRecordHelper = {}

local function updateRecordCache(key, value, score)
    value = tostring(value)
    score = tonumber(score) or 0
    local recordList = RecordListCache[tostring(key)]
    if recordList then
        local cache = recordList.cache
        for index, record in pairs(cache) do
            if record[1] == value then
                if record[2] >= score then
                    ---this max record had exist
                    return false
                else
                    table.remove(cache, index)
                    break
                end
            end
        end

        table.insert(cache, { value, score })
        table.sort(cache, function(a, b)
            return a[2] > b[2]
        end)
        return true
    end
    return false
end

function MaxRecordHelper:init()
    EventObservable:registerDataCallBack("SyncRecords", function(builder)
        local records = builder:getParam("records")
        local key = builder:getParam("key")
        if records and key then
            if not RecordListCache[tostring(key)] then
                MaxRecordHelper:addGameRecord(key)
            end
            local list = StringUtil.split(records, "'")
            for _, recordStr in pairs(list) do
                local record = StringUtil.split(recordStr, ":")
                updateRecordCache(key, record[1], record[2])
            end
        end
        local requestId = builder:getParam("requestId")
        if requestId and callbackList[tostring(requestId)] then
            local requestCallback = callbackList[tostring(requestId)]
            requestCallback.func(requestCallback.key, requestCallback.startIndex, requestCallback.endIndex, requestCallback.callback)
        end
    end, DataBuilderProcessor)
end

function MaxRecordHelper:addGameRecord(key)
    RecordListCache[tostring(key)] = {
        cache = {},
        isEnd = false
    }
end

---根据startIndex ,endIndex 组成的区间查询 key记录榜
function MaxRecordHelper:getRecord(key, page, size, callback)
    local getList = function(key, startIndex, endIndex, callback)
        local recordList = RecordListCache[tostring(key)]
        local list = {}
        if recordList and recordList.cache then
            for i = startIndex, endIndex do
                if recordList.cache[i] then
                    table.insert(list, {
                        rank = i,
                        value = recordList.cache[i][1],
                        score = recordList.cache[i][2]
                    })
                else
                    recordList.isEnd = true
                end
            end
        end
        callback(list)
    end
    local startIndex = (page - 1) * size + 1
    local endIndex = page * size
    local recordList = RecordListCache[tostring(key)]
    if not recordList or (#recordList.cache < endIndex and not recordList.isEnd) then
        ---记录请求id, 用于回包后接着处理逻辑.
        requestId = requestId + 1
        callbackList[tostring(requestId)] = {
            func = function(key, startIndex, endIndex, callback)
                getList(key, startIndex, endIndex, callback)
            end,
            key = key,
            startIndex = startIndex,
            endIndex = endIndex,
            callback = callback
        }

        ---当缓存数据不足时,  向服务器请求更多数据
        local builder = DataBuilder.new():fromTable({
            key = key,
            endIndex = endIndex,
            requestId = requestId
        })
        PacketSender:sendLuaCommonData("GetRecord", builder:getData())
    else
        getList(key, startIndex, endIndex, callback)
    end
end